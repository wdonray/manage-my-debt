type Debt @aws_iam @aws_cognito_user_pools {
  id: ID!
  name: String!
  type: String!
  balance: Float!
  apr: Float!
  payment: Float!
  user: User!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  userDebtId: ID
  owner: String
}

type User @aws_iam @aws_cognito_user_pools {
  id: ID!
  name: String!
  debt(filter: ModelDebtFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelDebtConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  owner: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelDebtConnection @aws_iam @aws_cognito_user_pools {
  items: [Debt]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelDebtFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  type: ModelStringInput
  balance: ModelFloatInput
  apr: ModelFloatInput
  payment: ModelFloatInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelDebtFilterInput]
  or: [ModelDebtFilterInput]
  not: ModelDebtFilterInput
  _deleted: ModelBooleanInput
  userDebtId: ModelIDInput
  owner: ModelStringInput
}

type Query {
  getDebt(id: ID!): Debt @aws_iam @aws_cognito_user_pools
  listDebts(filter: ModelDebtFilterInput, limit: Int, nextToken: String): ModelDebtConnection @aws_iam @aws_cognito_user_pools
  syncDebts(filter: ModelDebtFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelDebtConnection @aws_iam @aws_cognito_user_pools
  getUser(id: ID!): User @aws_iam @aws_cognito_user_pools
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection @aws_iam @aws_cognito_user_pools
  syncUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelUserConnection @aws_iam @aws_cognito_user_pools
}

input ModelDebtConditionInput {
  name: ModelStringInput
  type: ModelStringInput
  balance: ModelFloatInput
  apr: ModelFloatInput
  payment: ModelFloatInput
  and: [ModelDebtConditionInput]
  or: [ModelDebtConditionInput]
  not: ModelDebtConditionInput
  _deleted: ModelBooleanInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  userDebtId: ModelIDInput
  owner: ModelStringInput
}

input CreateDebtInput {
  id: ID
  name: String!
  type: String!
  balance: Float!
  apr: Float!
  payment: Float!
  _version: Int
  userDebtId: ID
}

input UpdateDebtInput {
  id: ID!
  name: String
  type: String
  balance: Float
  apr: Float
  payment: Float
  _version: Int
  userDebtId: ID
}

input DeleteDebtInput {
  id: ID!
  _version: Int
}

type Mutation {
  createDebt(input: CreateDebtInput!, condition: ModelDebtConditionInput): Debt @aws_iam @aws_cognito_user_pools
  updateDebt(input: UpdateDebtInput!, condition: ModelDebtConditionInput): Debt @aws_iam @aws_cognito_user_pools
  deleteDebt(input: DeleteDebtInput!, condition: ModelDebtConditionInput): Debt @aws_iam @aws_cognito_user_pools
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User @aws_iam @aws_cognito_user_pools
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User @aws_iam @aws_cognito_user_pools
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User @aws_iam @aws_cognito_user_pools
}

input ModelSubscriptionDebtFilterInput {
  id: ModelSubscriptionIDInput
  name: ModelSubscriptionStringInput
  type: ModelSubscriptionStringInput
  balance: ModelSubscriptionFloatInput
  apr: ModelSubscriptionFloatInput
  payment: ModelSubscriptionFloatInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionDebtFilterInput]
  or: [ModelSubscriptionDebtFilterInput]
  _deleted: ModelBooleanInput
  owner: ModelStringInput
}

type Subscription {
  onCreateDebt(filter: ModelSubscriptionDebtFilterInput, owner: String): Debt @aws_subscribe(mutations: ["createDebt"]) @aws_iam @aws_cognito_user_pools
  onUpdateDebt(filter: ModelSubscriptionDebtFilterInput, owner: String): Debt @aws_subscribe(mutations: ["updateDebt"]) @aws_iam @aws_cognito_user_pools
  onDeleteDebt(filter: ModelSubscriptionDebtFilterInput, owner: String): Debt @aws_subscribe(mutations: ["deleteDebt"]) @aws_iam @aws_cognito_user_pools
  onCreateUser(filter: ModelSubscriptionUserFilterInput, owner: String): User @aws_subscribe(mutations: ["createUser"]) @aws_iam @aws_cognito_user_pools
  onUpdateUser(filter: ModelSubscriptionUserFilterInput, owner: String): User @aws_subscribe(mutations: ["updateUser"]) @aws_iam @aws_cognito_user_pools
  onDeleteUser(filter: ModelSubscriptionUserFilterInput, owner: String): User @aws_subscribe(mutations: ["deleteUser"]) @aws_iam @aws_cognito_user_pools
}

type ModelUserConnection @aws_iam @aws_cognito_user_pools {
  items: [User]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelUserFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
  _deleted: ModelBooleanInput
  owner: ModelStringInput
}

input ModelUserConditionInput {
  name: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
  _deleted: ModelBooleanInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  owner: ModelStringInput
}

input CreateUserInput {
  id: ID
  name: String!
  _version: Int
}

input UpdateUserInput {
  id: ID!
  name: String
  _version: Int
}

input DeleteUserInput {
  id: ID!
  _version: Int
}

input ModelSubscriptionUserFilterInput {
  id: ModelSubscriptionIDInput
  name: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionUserFilterInput]
  or: [ModelSubscriptionUserFilterInput]
  _deleted: ModelBooleanInput
  userDebtId: ModelSubscriptionIDInput
  owner: ModelStringInput
}
